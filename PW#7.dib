#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №7.Реализация потока обработки команад.

**Цель:** Реализовать основу для многопоточного сервера приложений.

**Результаты:** После выполнения работы Вы сможете:
1. Обрабатывать множество операций в несколько потоков.
2. Останавливать потоки по запросу извне.

## Задание.
Пусть операция задана интерфейсом

#!csharp

using System.Threading;
using System.Collections.Concurrent;

public interface ICommand
{
    void Execute();
}

class HardStop: ICommand
{
    ServerThread thread;
    public HardStop(ServerThread stopedThread)
    {
        thread = stopedThread;
    }

    public void Execute()
    {
        if (Thread.CurrentThread != thread.currentServerThread)
        {
            throw new Exception();
        }

        thread.canContinue = false;
    }
}

class SoftStop: ICommand
{
    ServerThread thread;
    public SoftStop(ServerThread stopedThread)
    {
        thread = stopedThread;
    }

    public void Execute()
    {
        if (Thread.CurrentThread != thread.currentServerThread)
        {
            throw new Exception();
        }

        thread.canContinue = thread.queue.Count > 0;
    }
}

class ServerThread
{
    public ConcurrentQueue<ICommand> queue;
    public bool canContinue = true;
    public Thread currentServerThread;

    public ServerThread()
    {
        queue = new ConcurrentQueue<ICommand>();
        Thread thread1 = new Thread(Handle);
        Thread thread2 = new Thread(Handle);

        thread1.Start();
        thread2.Start();
    }

    private void ExeptionHandler(Exception ex, ICommand command)
    {
        if (command != null)
        {
            // Обработка исключения
        }
    }

    private void Handle()
    {
        currentServerThread = Thread.CurrentThread;
        while (canContinue)
        {
            ICommand command = null;
            try
            {
                if (queue.TryDequeue(out command))
                {
                    command.Execute();
                }
            }
            catch (Exception ex)
            {
                ExeptionHandler(ex, command);
            }
        }
    }
}

#!markdown

Классы, наследующие интерйес ICommand будем называть **Командами.**

Реализовать класс ServerThread и команды по hard и soft завершению потока. 

ServerThread может менять свое поведение для обработки следующей Команды.
Исключение, выброшенное из Команды, перехватывается и передается вместе с самой Командой в ExceptionHandler (см. ЛР №5) Примечание. Наличие реализованного обработчика исключений не обязательно для выполнения данной задачи. 

Команда HardStop приводит к немедленной остановке потока, несмотря на, что в очереди потока есть еще Команды.
Команда  SoftStop останавливает поток, когда в очереди потока закончатся все Команды.

Команды HardStop и SoftStop успешно выполняются только в потоке, который они должны остановить, в противном случае выбрасывают исключение.
Отсутствие Команд в очереди потока не должно требовать значительных затрат процессорного времени. Значительными считаются затраты, которые зависят от времени простоя потока.

Написать проверку, которая гарантирует правильное выполнение команд HardStop и SoftStop.
