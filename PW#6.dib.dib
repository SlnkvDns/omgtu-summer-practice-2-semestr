#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №6. Изучение производительности потоко-безопасных очередей.

**Цель:** Определить лучшую потоко-безопасную коллекцию для выполнения интенсивной обработки входящих сообщений.

**Результаты:** После выполнения работы Вы сможете:
1. Назвать оптимальную коллекцию для обработки большого количества сообщений.
2. Изучите примтив синхронизации Условная переманная.


**Материалы для самостоятельного изучения**.
1. [Потоко-безопасные коллекции](https://learn.microsoft.com/en-us/dotnet/standard/collections/thread-safe/)
2. Условные переменные Глава 5 п.5.1. книги Г. Эндрюс Основы многопоточного, параллельного и распределенного программирования
3. [Одна из реализаций условных переменных на .Net](https://learn.microsoft.com/ru-ru/dotnet/api/system.threading.manualresetevent?view=net-8.0)

## Задание.
Исслдеовать производительность BlockingCollection и ConcurrentQueue в сравнении с непотокоабезопасной очередью.

Для каждой потоко-безопасной очереди необходимо реализовать 2 потока: один записывает объект в очередь, а другой - читает объект из очереди.
Для непотокобезопасной очереди реализовать два цикла - записи миллиона объектов в очередь и чтение миллиона объектов из очереди.

Необходимо определить два промежутка времени:
- время за которое поток или цикл обработает миллион объектов
- время, необходимое на запись и чтение миллиона объектов из очреди.

Сделать десять замеров по каждой коллекции. Все замеры показать на графике.

Записать в ноутбуке вывод - какая и потоко-безопасных коллекций эффективнее. И выразить в процентах - скорость самой быстрой поток-безопасной коллекции по сравнению с обычной очредью.

**Указание**.
1. Необходимо исключить из замеров время, необходимое для запуска и остановки потоков, то есть посчитать чистое время, необходимое для обработки объектов.
Для этого следует использовать условные события, которые позволят убедиться, что оба потока запустились и готовы читать и писать объекты и только потом запускать таймер.
2. Для итогового вывода сравнивать усредненные значения.

#!csharp

using System.Threading;
using System.Collections.Concurrent;
using System.Diagnostics;

BlockingCollection<int> blockingCollection = new BlockingCollection<int>(1000);
ConcurrentQueue<int> concurrentQueue = new ConcurrentQueue<int>();

private void CalculateBlCol()
{
    Thread thread1 = new Thread(() => ReadDataBlCol(1000000));
    Thread thread2 = new Thread(() => WriteDataBlCol(1000000));

    thread1.Start();
    thread2.Start();

    thread1.Join();
    thread2.Join();
}

private void CalculateConQ()
{
    Thread thread1 = new Thread(() => ReadDataConQ(1000000));
    Thread thread2 = new Thread(() => WriteDataConQ(1000000));

    thread1.Start();
    thread2.Start();

    thread1.Join();
    thread2.Join();
}

private void ReadDataBlCol(int numObject)
{
    int countReadNumbers = 0;
    while (countReadNumbers < numObject)
    {
        blockingCollection.Take();
        Interlocked.Increment(ref countReadNumbers);
    }
}

private void WriteDataBlCol(int numObject)
{
    int countWrittenNumbers = 0;
    while (countWrittenNumbers < numObject)
    {
        blockingCollection.Add(1);
        Interlocked.Increment(ref countWrittenNumbers);
    }
}

private void ReadDataConQ(int numObject)
{
    int countReadNumbers = 0;
    while (countReadNumbers < numObject)
    {
        concurrentQueue.TryPeek(out int item);
        Interlocked.Increment(ref countReadNumbers);
    }
}

private void WriteDataConQ(int numObject)
{
    int countWrittenNumbers = 0;
    while (countWrittenNumbers < numObject)
    {
        concurrentQueue.Enqueue(1);
        Interlocked.Increment(ref countWrittenNumbers);
    }
}

Stopwatch sw = new Stopwatch();
sw.Start();
Calculations();
sw.Stop();
Console.WriteLine(sw.ElapsedMilliseconds);

#!markdown

## Вывод
